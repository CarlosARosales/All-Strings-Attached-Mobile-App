{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isBoolean, isFunction, isNumber, isObject, isString, isUndefined, isAndroid } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from \"./FirestoreCollectionReference\";\nimport FirestoreDocumentReference from \"./FirestoreDocumentReference\";\nimport FirestorePath from \"./FirestorePath\";\nimport FirestoreQuery from \"./FirestoreQuery\";\nimport FirestoreQueryModifiers from \"./FirestoreQueryModifiers\";\nimport FirestoreStatics from \"./FirestoreStatics\";\nimport FirestoreTransactionHandler from \"./FirestoreTransactionHandler\";\nimport FirestoreWriteBatch from \"./FirestoreWriteBatch\";\nimport version from \"./version\";\nvar namespace = 'firestore';\nvar nativeModuleName = ['RNFBFirestoreModule', 'RNFBFirestoreCollectionModule', 'RNFBFirestoreDocumentModule', 'RNFBFirestoreTransactionModule'];\nvar nativeEvents = ['firestore_collection_sync_event', 'firestore_document_sync_event', 'firestore_transaction_event'];\n\nvar FirebaseFirestoreModule = function (_FirebaseModule) {\n  _inherits(FirebaseFirestoreModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseFirestoreModule);\n\n  function FirebaseFirestoreModule(app, config) {\n    var _this;\n\n    _classCallCheck(this, FirebaseFirestoreModule);\n\n    _this = _super.call(this, app, config);\n    _this._referencePath = new FirestorePath();\n    _this._transactionHandler = new FirestoreTransactionHandler(_assertThisInitialized(_this));\n\n    _this.emitter.addListener(_this.eventNameForApp('firestore_collection_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(\"firestore_collection_sync_event:\" + event.listenerId), event);\n    });\n\n    _this.emitter.addListener(_this.eventNameForApp('firestore_document_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(\"firestore_document_sync_event:\" + event.listenerId), event);\n    });\n\n    _this._settings = {\n      ignoreUndefinedProperties: false\n    };\n    return _this;\n  }\n\n  _createClass(FirebaseFirestoreModule, [{\n    key: \"batch\",\n    value: function batch() {\n      return new FirestoreWriteBatch(this);\n    }\n  }, {\n    key: \"clearPersistence\",\n    value: function clearPersistence() {\n      return _regeneratorRuntime.async(function clearPersistence$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.native.clearPersistence());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"waitForPendingWrites\",\n    value: function waitForPendingWrites() {\n      return _regeneratorRuntime.async(function waitForPendingWrites$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.native.waitForPendingWrites());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      return _regeneratorRuntime.async(function terminate$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.native.terminate());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !isString(host) || !port || !isNumber(port)) {\n        throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n      }\n\n      var _host = host;\n\n      if (isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      if (!isString(collectionPath)) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a string value.\");\n      }\n\n      if (collectionPath === '') {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\");\n      }\n\n      var path = this._referencePath.child(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\");\n      }\n\n      return new FirestoreCollectionReference(this, path);\n    }\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      if (!isString(collectionId)) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\");\n      }\n\n      if (collectionId === '') {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\");\n      }\n\n      if (collectionId.indexOf('/') >= 0) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\");\n      }\n\n      return new FirestoreQuery(this, this._referencePath.child(collectionId), new FirestoreQueryModifiers().asCollectionGroupQuery());\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function disableNetwork() {\n      return _regeneratorRuntime.async(function disableNetwork$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.native.disableNetwork());\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      if (!isString(documentPath)) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n      }\n\n      if (documentPath === '') {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n      }\n\n      var path = this._referencePath.child(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n      }\n\n      return new FirestoreDocumentReference(this, path);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function enableNetwork() {\n      return _regeneratorRuntime.async(function enableNetwork$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(this.native.enableNetwork());\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      if (!isFunction(updateFunction)) {\n        return Promise.reject(new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"));\n      }\n\n      return this._transactionHandler._add(updateFunction);\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(_settings) {\n      if (!isObject(_settings)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"));\n      }\n\n      var keys = Object.keys(_settings);\n      var opts = ['cacheSizeBytes', 'host', 'persistence', 'ssl', 'ignoreUndefinedProperties', 'serverTimestampBehavior'];\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        if (!opts.includes(key)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.\" + key + \"' is not a valid settings field.\"));\n        }\n      }\n\n      if (!isUndefined(_settings.cacheSizeBytes)) {\n        if (!isNumber(_settings.cacheSizeBytes)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\"));\n        }\n\n        if (_settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < 1048576) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\"));\n        }\n      }\n\n      if (!isUndefined(_settings.host)) {\n        console.warn('host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.');\n\n        if (!isString(_settings.host)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"));\n        }\n\n        if (_settings.host === '') {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\"));\n        }\n\n        if (isAndroid) {\n          if (_settings.host.startsWith('localhost')) {\n            _settings.host = _settings.host.replace('localhost', '10.0.2.2');\n            console.log('Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n\n          if (_settings.host.startsWith('127.0.0.1')) {\n            _settings.host = _settings.host.replace('127.0.0.1', '10.0.2.2');\n            console.log('Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n        }\n      }\n\n      if (!isUndefined(_settings.persistence) && !isBoolean(_settings.persistence)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\"));\n      }\n\n      if (!isUndefined(_settings.ssl) && !isBoolean(_settings.ssl)) {\n        throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n      }\n\n      if (!isUndefined(_settings.serverTimestampBehavior) && !['estimate', 'previous', 'none'].includes(_settings.serverTimestampBehavior)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\"));\n      }\n\n      if (!isUndefined(_settings.ignoreUndefinedProperties)) {\n        if (!isBoolean(_settings.ignoreUndefinedProperties)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\"));\n        } else {\n          this._settings.ignoreUndefinedProperties = _settings.ignoreUndefinedProperties;\n        }\n\n        delete _settings.ignoreUndefinedProperties;\n      }\n\n      return this.native.settings(_settings);\n    }\n  }]);\n\n  return FirebaseFirestoreModule;\n}(FirebaseModule);\n\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"sources":["D:/Senior Design App/logger-app/node_modules/@react-native-firebase/firestore/lib/index.js"],"names":["isBoolean","isFunction","isNumber","isObject","isString","isUndefined","isAndroid","createModuleNamespace","FirebaseModule","getFirebaseRoot","FirestoreCollectionReference","FirestoreDocumentReference","FirestorePath","FirestoreQuery","FirestoreQueryModifiers","FirestoreStatics","FirestoreTransactionHandler","FirestoreWriteBatch","version","namespace","nativeModuleName","nativeEvents","FirebaseFirestoreModule","app","config","_referencePath","_transactionHandler","emitter","addListener","eventNameForApp","event","emit","listenerId","_settings","ignoreUndefinedProperties","native","clearPersistence","waitForPendingWrites","terminate","host","port","Error","_host","console","log","useEmulator","collectionPath","path","child","isCollection","collectionId","indexOf","asCollectionGroupQuery","disableNetwork","documentPath","isDocument","enableNetwork","updateFunction","Promise","reject","_add","settings","keys","Object","opts","i","length","key","includes","cacheSizeBytes","CACHE_SIZE_UNLIMITED","warn","startsWith","replace","persistence","ssl","serverTimestampBehavior","SDK_VERSION","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isAndroid,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\n\nconst namespace = 'firestore';\n\nconst nativeModuleName = [\n  'RNFBFirestoreModule',\n  'RNFBFirestoreCollectionModule',\n  'RNFBFirestoreDocumentModule',\n  'RNFBFirestoreTransactionModule',\n];\n\nconst nativeEvents = [\n  'firestore_collection_sync_event',\n  'firestore_document_sync_event',\n  'firestore_transaction_event',\n];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this._settings = {\n      ignoreUndefinedProperties: false,\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\",\n      );\n    }\n\n    if (collectionId === '') {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\",\n      );\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\",\n      );\n    }\n\n    return new FirestoreQuery(\n      this,\n      this._referencePath.child(collectionId),\n      new FirestoreQueryModifiers().asCollectionGroupQuery(),\n    );\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"),\n      );\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"),\n      );\n    }\n\n    const keys = Object.keys(settings);\n\n    const opts = [\n      'cacheSizeBytes',\n      'host',\n      'persistence',\n      'ssl',\n      'ignoreUndefinedProperties',\n      'serverTimestampBehavior',\n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(\n          new Error(\n            `firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`,\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\",\n          ),\n        );\n      }\n\n      if (\n        settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\",\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.',\n      );\n      if (!isString(settings.host)) {\n        return Promise.reject(\n          new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"),\n        );\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\",\n          ),\n        );\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (\n      !isUndefined(settings.serverTimestampBehavior) &&\n      !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)\n    ) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\",\n          ),\n        );\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule,\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"module"}